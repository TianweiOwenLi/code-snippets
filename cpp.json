{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"template": {
		"prefix": "tpl",
		"body": [
			"#include <iostream>",
			"#include <fstream>",
			"#include <assert.h>",
			"#include <set>",			
			"#include <map>",
			"#include <unordered_set>",
			"#include <unordered_map>",
			"#include <stack>",
			"#include <queue>",
			"#include <list>",
			"#include <vector>",
			"#include <bitset>",
			"#include <random>",
			"#include <complex>",
			"#include <algorithm>",
			"#include <functional>",
			"#include <cmath>",
			"#include <string>",
			"using std::cin;",
			"using std::cout;",
			"using std::endl;",
			"using std::vector;",
			"using std::stack;",
			"using std::queue;",
			"using std::pair;",
			"using std::unordered_set;",
			"using std::unordered_map;",
			"using std::multimap;",
			"using std::function;",
			"using std::min;",
			"using std::max;",
			"#define dbg(x) std::cout<<#x<<\" = \"<<x<<'\\n'",
			"#define mp(x,y) std::make_pair(x,y)",
		],
		"description": "template for c++ files"
	},

	"lambda": {
		"prefix": "fn",
		"body": "function< $1 ($2) > $3 = [$4]($5){$0};",
		"description": "lambda"
	}, 

	"header template": {
		"prefix": "htpl",
		"body": [
			"#ifndef $1",
			"#define $1",
			"$0",
			"#endif",
		],
		"description": "template for c++ header files"
	}
}